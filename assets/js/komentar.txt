
    /* Fungsi-fungsi berikut dikomentari karena belum digunakan
    // Insert conference data
    insertPreviousConferences: async (conferencesData) => {
        try {
            const response = await fetch(`${SUPABASE_CONFIG.url}/rest/v1/previous_conferences`, {
                method: 'POST',
                headers: {
                    'apikey': SUPABASE_CONFIG.apiKey,
                    'Authorization': `Bearer ${SUPABASE_CONFIG.apiKey}`,
                    'Content-Type': 'application/json',
                    'Prefer': 'return=representation'
                },
                body: JSON.stringify(conferencesData)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (err) {
            console.error('Error inserting conferences:', err);
            return null;
        }
    },

    // Update conference data
    updateConference: async (id, updates) => {
        try {
            const response = await fetch(`${SUPABASE_CONFIG.url}/rest/v1/previous_conferences?id=eq.${id}`, {
                method: 'PATCH',
                headers: {
                    'apikey': SUPABASE_CONFIG.apiKey,
                    'Authorization': `Bearer ${SUPABASE_CONFIG.apiKey}`,
                    'Content-Type': 'application/json',
                    'Prefer': 'return=representation'
                },
                body: JSON.stringify(updates)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (err) {
            console.error('Error updating conference:', err);
            return null;
        }
    },

    // Delete conference data
    deleteConference: async (id) => {
        try {
            const response = await fetch(`${SUPABASE_CONFIG.url}/rest/v1/previous_conferences?id=eq.${id}`, {
                method: 'DELETE',
                headers: {
                    'apikey': SUPABASE_CONFIG.apiKey,
                    'Authorization': `Bearer ${SUPABASE_CONFIG.apiKey}`,
                    'Prefer': 'return=representation'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (err) {
            console.error('Error deleting conference:', err);
            return null;
        }
    }
    */